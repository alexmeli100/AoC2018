
==================== FINAL INTERFACE ====================
2018-12-01 15:59:19.5781845 UTC

interface main:Main 8044
  interface hash: 12274c8fa27bc3913dc5047c71e787a2
  ABI hash: e3e64e2d2ed6e7502ec90f454a0129bc
  export-list hash: 8ba72c0ddffd5baa0c77c9b275408f90
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: dc139b35a6825e5f4c88c735b3c815c6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.part1
  Main.part2
  Main.readInts
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntSet.Internal
import  -/  base-4.11.1.0:Control.Monad 60c7bc648329161549cea9b9658c9b81
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Data.OldList 3987872d5de68d40c22cd1c30825ad08
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.IO 4c8fe011020182bbb838fae9b78bbe23
import  -/  base-4.11.1.0:Text.Read 5c288a0919cb418cf58278e23fdb845d
import  -/  containers-0.5.11.0:Data.IntSet 469f25458280caa1d6d94fc0871a5e47
import  -/  containers-0.5.11.0:Data.IntSet.Internal 15eebea49a2ac0b2d563baecd731d60d
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0c29bc39d3c323d554c4c7d064c077f3
  $wgo ::
    Data.IntSet.Internal.IntSet
    -> [Data.IntSet.Internal.Key] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
d8f6fc0911738fe369b0e19aa5a95079
  $wgo1 :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U>m2, Inline: [0] -}
6bbe0b16963db474106a06c54a4388c7
  $wgo2 :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
615ba0a12038a819aa2ebaca9acb1e3f
  $wpart2 :: GHC.Base.String -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 Main.$wgo
                   Data.IntSet.Internal.Nil
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.main7
                      (case GHC.Base.map
                              @ [GHC.Types.Char]
                              @ GHC.Types.Int
                              Main.main2
                              (Data.OldList.lines w) of wild {
                         [] -> case GHC.List.cycle1 ret_ty [GHC.Types.Int] of {}
                         : ipv ipv1
                         -> letrec {
                              xs' :: [GHC.Types.Int]
                              = GHC.Base.++_$s++ @ GHC.Types.Int xs' ipv ipv1
                            } in
                            case GHC.List.$wscanlGo
                                   @ GHC.Types.Int
                                   @ GHC.Types.Int
                                   @ GHC.Types.Int
                                   @ GHC.Types.Int
                                   GHC.Num.$fNumInt_$c+
                                   Main.main7
                                   xs' of ww { (#,#) ww1 ww2 ->
                            ww2 } }))) -}
5fe430e11694079c24d5585450982a86
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e9d0cc19a79b05fc9889aefa0d55c673
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main8
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Main.$wgo1 (Data.OldList.lines ipv3) 0#)
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case Main.$wpart2 ipv3 of ww { DEFAULT ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   ipv4 } } }) -}
11b7ae55f95c3b0030f2359d19af0b9e
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
25d01e274f9592c617d7e5273ace9d45
  main2 :: [GHC.Types.Char] -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.main6
                           (GHC.List.filter @ GHC.Types.Char Main.main5 x)) of wild {
                   [] -> Main.main4
                   : x1 ds
                   -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Main.main3 } }) -}
ffb569146bf9df9d2f5eb75d1ab97a0a
  main3 :: GHC.Types.Int
  {- Strictness: x -}
3c5c9341616b9b9748e1e3b60853363b
  main4 :: GHC.Types.Int
  {- Strictness: x -}
23eb65bcbfc3d64c247bc42e9c8ec17d
  main5 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True '+'# -> GHC.Types.False } }) -}
fa0135d99b2f905ee15b17ea867bc180
  main6 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
4fc9d0ad507f4f38dfc486f788f4a1b1
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c5caa7ea0dc2d25eba878306c7bf37ec
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
d1c83155dd029e2cba999e3fd032b931
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("input.txt"#) -}
aa46869a75992dad28b4e9b9ad63851c
  part1 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wgo2 (Data.OldList.lines w) 0# of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
6a0b77a300d584678e1c1b310a9f2146
  part2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wpart2 w of ww { DEFAULT -> GHC.Types.I# ww }) -}
43e9d09ce0fb241e1833ab25d1dfdd3b
  readInts :: GHC.Base.String -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 GHC.Base.build
                   @ GHC.Types.Int
                   (\ @ b1
                      (c :: GHC.Types.Int -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Int
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Main.main2)
                      n
                      (Data.OldList.lines x))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

